// Sunset inc.

#include "Drawable.h"
#include "Texture.h"

#include "VertexObject.h"

namespace
{
	Sunset::Object data = {
		{
			// Face avant (+Z)
			{{-0.5f, -0.5f,  0.5f}, { 0,  0,  1}, {0.0f, 0.0f}}, // 0
			{{ 0.5f, -0.5f,  0.5f}, { 0,  0,  1}, {1.0f, 0.0f}}, // 1
			{{ 0.5f,  0.5f,  0.5f}, { 0,  0,  1}, {1.0f, 1.0f}}, // 2
			{{-0.5f,  0.5f,  0.5f}, { 0,  0,  1}, {0.0f, 1.0f}}, // 3

			// Face droite (+X)
			{{ 0.5f, -0.5f,  0.5f}, { 1,  0,  0}, {0.0f, 0.0f}}, // 4
			{{ 0.5f, -0.5f, -0.5f}, { 1,  0,  0}, {1.0f, 0.0f}}, // 5
			{{ 0.5f,  0.5f, -0.5f}, { 1,  0,  0}, {1.0f, 1.0f}}, // 6
			{{ 0.5f,  0.5f,  0.5f}, { 1,  0,  0}, {0.0f, 1.0f}}, // 7

			// Face arrière (-Z)
			{{ 0.5f, -0.5f, -0.5f}, { 0,  0, -1}, {0.0f, 0.0f}}, // 8
			{{-0.5f, -0.5f, -0.5f}, { 0,  0, -1}, {1.0f, 0.0f}}, // 9
			{{-0.5f,  0.5f, -0.5f}, { 0,  0, -1}, {1.0f, 1.0f}}, //10
			{{ 0.5f,  0.5f, -0.5f}, { 0,  0, -1}, {0.0f, 1.0f}}, //11

			// Face gauche (-X)
			{{-0.5f, -0.5f, -0.5f}, {-1,  0,  0}, {0.0f, 0.0f}}, //12
			{{-0.5f, -0.5f,  0.5f}, {-1,  0,  0}, {1.0f, 0.0f}}, //13
			{{-0.5f,  0.5f,  0.5f}, {-1,  0,  0}, {1.0f, 1.0f}}, //14
			{{-0.5f,  0.5f, -0.5f}, {-1,  0,  0}, {0.0f, 1.0f}}, //15

			// Face haut (+Y)
			{{-0.5f,  0.5f,  0.5f}, { 0,  1,  0}, {0.0f, 0.0f}}, //16
			{{ 0.5f,  0.5f,  0.5f}, { 0,  1,  0}, {1.0f, 0.0f}}, //17
			{{ 0.5f,  0.5f, -0.5f}, { 0,  1,  0}, {1.0f, 1.0f}}, //18
			{{-0.5f,  0.5f, -0.5f}, { 0,  1,  0}, {0.0f, 1.0f}}, //19

			// Face bas (-Y)
			{{-0.5f, -0.5f, -0.5f}, { 0, -1,  0}, {0.0f, 0.0f}}, //20
			{{ 0.5f, -0.5f, -0.5f}, { 0, -1,  0}, {1.0f, 0.0f}}, //21
			{{ 0.5f, -0.5f,  0.5f}, { 0, -1,  0}, {1.0f, 1.0f}}, //22
			{{-0.5f, -0.5f,  0.5f}, { 0, -1,  0}, {0.0f, 1.0f}}, //23
		},
		{
			0, 1, 2,  2, 3, 0,       // Front
			4, 5, 6,  6, 7, 4,       // Right
			8, 9,10, 10,11, 8,       // Back
		   12,13,14, 14,15,12,       // Left
		   16,17,18, 18,19,16,       // Top
		   20,21,22, 22,23,20        // Bottom
		}
	};
	Sunset::VertexObject vo = Sunset::VertexObject(data);
}

namespace Sunset
{
	Drawable::Drawable()
	{
	}

	Drawable::~Drawable()
	{
	}

	void Drawable::Draw() const
	{
		if (m_Texture)
			m_Texture->Use();

		if (m_Mesh)
			m_Mesh->Draw();
	}

	CubeMap::CubeMap()
	{

	}

	CubeMap::~CubeMap()
	{

	}

	void CubeMap::Draw()
	{
		if (m_Texture)
			m_Texture->Use();

		vo.Draw();
	}

}
